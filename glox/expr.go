// Code generated by go generate; DO NOT EDIT.
package main

import (
	"fmt"
	"strconv"

	"github.com/kr/pretty"
)

type Expr interface {
	isExpr()
	String() string
}

type Binary struct {
	Left     Expr
	Right    Expr
	Operator Token
}

func (b Binary) String() string {
	return pretty.Sprint(b)
}

type Grouping struct {
	Expression Expr
}

func (g Grouping) String() string {
	return pretty.Sprint(g)
}

type Literal struct {
	Value interface{}
}

func (l Literal) String() string {
	if l.Value == nil {
		return "nil"
	}

	if n, ok := l.Value.(float64); ok {
		return strconv.FormatFloat(n, 'f', -1, 64)
	}

	return fmt.Sprint(l.Value)
}

type Unary struct {
	Operator Token
	Right    Expr
}

func (u Unary) String() string {
	return pretty.Sprint(u)
}

type Variable struct {
	Identifier Token
}

func (v Variable) String() string {
	return fmt.Sprintf("Variable{%s}", v.Identifier)
}

type Let struct {
	Identifier Token
	Init       Expr
	Body       Expr
}

func (l Let) String() string {
	return pretty.Sprint(l)
}

func (b Binary) isExpr()   {}
func (g Grouping) isExpr() {}
func (l Literal) isExpr()  {}
func (u Unary) isExpr()    {}
func (l Let) isExpr()      {}
func (v Variable) isExpr() {}
